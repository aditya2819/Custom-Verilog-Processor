00001_00001_00000_1_00000_000000000101  // MOV R1, #5
00001_00010_00000_1_00000_000000000011  // MOV R2, #3
00010_00011_00001_0_00010_000000000000  // ADD R3, R1, R2
00011_00100_00001_0_00010_000000000000  // SUB R4, R1, R2
00100_00101_00001_0_00010_000000000000  // MUL R5, R1, R2
00101_00110_00001_0_00010_000000000000  // ROR R6, R1, R2
01011_00111_00001_0_00000_000000000000  // RNOT R7, R1
01101_00000_00001_1_00000_000000000010  // STOREREG R1 → MEM[2]
10001_01000_00000_1_00000_000000000010  // SENDREG MEM[2] → R8
01111_00000_00000_1_00000_000000000010  // SENDDOUT MEM[2] → dout
10010_00000_00000_1_00000_000000001101  // JUMP to address 13
00001_01001_00000_1_00000_000000111111  // (Will be skipped if jump works)
00001_01001_00000_1_00000_000000001001  // MOV R9, #9 (check PC after jump)
11011_00000_00000_0_00000_000000000000  // HALT
